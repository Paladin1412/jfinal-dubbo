package com.kakarote.crm9.erp.crm.entity;

import com.jfinal.kit.Kv;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import com.kakarote.crm9.erp.crm.entity.base.BaseCrmCustomer;
import lombok.Getter;
import lombok.Setter;

import java.math.BigDecimal;
import java.util.List;
import java.util.Objects;

/**
 * Generated by JFinal.
 * @author honglei.wan
 */
@SuppressWarnings("serial")
@Getter
@Setter
public class CrmCustomer extends BaseCrmCustomer<CrmCustomer> {
	public static final CrmCustomer dao = new CrmCustomer().dao();
	/**
	 * 移出方式（1.移除2.转为团队成员）
	 */
	private Integer transferType;
	/**
	 * 同时变更（1.联系人2.商机3.合同）
	 */
	private String changeType;
	/**
	 * 权限（1.只读2.只写）
	 */
	private Integer power;
	/**
	 * 变更负责人
	 */
	private Integer newOwnerUserId;

	private String ids;

	private String memberIds;

	private String customerIds;

	private Integer checkstatus;

	private String businessName;

	private String ownerUserName;

	/***
	 * 官网用户ID
	 */
	private Long userId;
	/**
	 * 新负责人域账号
	 */
    private String newOwnerUserLoginId;
	/**
	 * 申请人域账号
	 */
	private String applyUserLoginId;
    /**
     * 申请原因
     */
    private String reason;
	/**
	 * 订单累计总收入
	 */
	private String totalAmount;
	/**
	 * 负责人域账号
	 */
    private String ownerUserLoginId;
	/**
	 * 客户创建时间
	 */
    private String createTimeView;

	/**
	 * 客户行业
	 */
	private String industryName;

	/**
	 * 部门名称
	 */
	private String deptName;

	/**
	 * 库容类型
	 */
	private Integer storageType;

	/**
	 * OA审核结果： 1 审核成功 2 主动审核失败 3 自动审核失败
	 */
	private Integer auditResult;

	/**
	 * 申请人（BD）业绩增加值
	 */
	private BigDecimal applicantPerformance;

	/**
	 * 订单支付金额
	 */
	private BigDecimal orderPaymentAmount;

	/**
	 * 原始客户姓名
	 */
	private String originalCustomerName;

	/**
	 * 根据域账号查询 我负责的、我参与的、下属负责的 三个场景的客户数据
	 * @param userIds
	 * @param userId
	 * @return
	 */
	public List<Record> queryCustomerWithOwnerAndGroupMember(List<Long> userIds, Long userId){
		return Db.find(Db.getSqlPara("customer.scene.queryCustomerWithOwnerAndGroupMember", Kv.by("userIds", userIds).set("userId", userId)));
	}

	/**
	 * 根据客户ID查询客户名称
	 * @param customerId
	 * @return
	 */
	public String queryNameByCustomerId(Long customerId) {
		if (Objects.isNull(customerId)) {
			return null;
		}
		return Db.queryStr(Db.getSql("crm.customer.queryNameByCustomerId"), customerId);
	}
}
